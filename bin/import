#!/usr/bin/env node

'use strict';

const fetch = require('node-fetch');
const fs = require('fs');
const mkdirp = require('mkdirp');
const models = require('../models');
const path = require('path');
const readline = require('readline');
const XLSX = require('xlsx');

if (process.argv.length < 3) {
  console.log('Usage: bin/import path/to/file.xlsx');
  process.exit(1);
}

parseWorkbook();

function downloadWorkbook(url) {
  return new Promise(function(resolve, reject) {
    mkdirp.sync(path.resolve(__dirname, '../tmp'));
    const filename = path.resolve(__dirname, '../tmp/file.xlsx');
    const file = fs.createWriteStream(filename);
    fetch(url).then(function(response) {
      response.body.on('end', function() {
        resolve(filename);
      });
      response.body.pipe(file)
    });
  });
}

async function parseWorkbook() {
  //// download file, if url
  let filename = process.argv[2];
  if (filename.startsWith('http')) {
    console.log('Downloading workbook...');
    filename = await downloadWorkbook(filename);
  }

  //// read Excel workbook
  console.log('Parsing workbook...');
  const workbook = XLSX.readFile(filename);

  //// set up console input/output
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  //// enumerate all the sheets in the workbook
  console.log('Sheets:')
  let i = 1;
  for (let sheetName of workbook.SheetNames) {
    console.log(`${i}. ${sheetName}`);
    i += 1;
  }

  //// prompt user for sheet selection
  rl.question('Select a sheet to import: ', function(answer) {
    const i = parseInt(answer) - 1;
    importRows(workbook.Sheets[workbook.SheetNames[i]])
      .then(function() {
        console.log('Done!');
      })
      .catch(function(error) {
        console.log(error);
      })
      .finally(function() {
        //// clean up and exit
        rl.close();
        process.exit();
      });
  });
}

async function importRows(sheet) {
  const rows = XLSX.utils.sheet_to_json(sheet, {header: 1});
  //// extract header row
  const header = rows.splice(0, 1)[0];
  //// process each row...
  let i = 0;
  for (let row of rows) {
    //// find or create report- year cell sometimes empty, should be same as previous row since every sheet is the same year
    let year = row[0] ? row[0] : rows[i - 1][0];
    let title = row[1];
    if (!year || !title) {
      console.error(`[${i+2}] Unable to extract CGJ Year and Report Title`);
      continue;
    }
    year = year.trim();
    title = title.trim();
    const [report] = await models.Report.findOrCreate({where: { year, title }});

    //// find or create recommendation
    let code, content, col;
    if (header[2] == 'Rec Number') {
      code = row[2].trim();
      content = row[3].trim();
      col = 4;
    } else {
      const match = row[2].match(/([^ ]+) (.+)/);
      if (!match) {
        console.error(`[${i+2}] Unable to extract Recommendation Code and Text`);
        process.exit(1);
      }
      code = match[1];
      if (code.endsWith('.')) {
        code = code.substring(0, code.length - 1);
      }
      content = match[2].trim();
      col = 3;
    }
    const [recommendation] = await models.Recommendation.findOrCreate({
      where: {
        reportId: report.id,
        code
      }
    });
    await recommendation.update({content});

    //// find or create assignment
    const assignee = row[col++].trim();
    const [assignment] = await models.RecommendationAssignment.findOrCreate({
      where: {
        recommendationId: recommendation.id,
        assignee
      }
    });

    //// find or create response(s)
    for (; col < row.length; col += 2) {
      //// extract reponse year
      const match = header[col].match(/(\d{4}) Response/);
      if (!match) {
        console.error(`[${i+2}] Unable to extract Response Year`);
        process.exit(1);
      }
      if (col + 1 >= row.length) {
        break;
      }
      const year = match[1];
      const status = (row[col] ? row[col] : '').trim();
      const content = (row[col + 1] ? row[col + 1] : '').trim();
      const [response] = await models.RecommendationAssignmentResponse.findOrCreate({
        where: {
          assignmentId: assignment.id,
          year
        },
        defaults: { status }
      });
      await response.update({status, content});
      console.log(`[${i+2}] ${report.year}: ${report.title}, ${recommendation.code}, ${assignment.assignee}, ${response.year}: ${response.status}`);
    }
    i += 1;
  }
}
